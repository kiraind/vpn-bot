import TelegramBot from 'node-telegram-bot-api'
import prettyBytes from 'pretty-bytes-es5'
import { bot } from './bot'
import { getClients } from './api/getClients'
import { getClientConfigQR } from './api/getClientConfigQR'
import { getClientConfig } from './api/getClientConfig'
import { createClient } from './api/createClient'
import { disableClient } from './api/disableClient'
import { checkMembership } from './checkMembership'

export async function handleMessage(msg: TelegramBot.Message) {
  const fromId = msg.from?.id;

  if(!fromId) {
    return
  }
  
  const isMember = await checkMembership(fromId)

  if(isMember) {
    await bot.sendMessage(fromId, '–°–æ—Ä—Ä–∏, —Ç–µ–±—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö')
    return
  }

  const username = msg.from?.username;

  if(!username) {
    await bot.sendMessage(fromId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å —é–∑–µ—Ä–Ω–µ–π–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ')
    return
  }

  const text = msg.text;

  if(!text) {
    return
  }

  const devices = await getClients()

  if(text.startsWith('/add')) {
    const id = text.split(' ')[1]

    if(!id || !/^[a-z0-9-]+$/i.test(id)) {
      await bot.sendMessage(fromId, '–£–∫–∞–∂–∏—Ç–µ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ —á–µ—Ä—Ç–æ—á–µ–∫ (-)')
      return
    }

    const fullId = `${username}:${id}`;

    if(devices.find(device => device.name === fullId)) {
      await bot.sendMessage(fromId, '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å')
      return
    }

    await bot.sendChatAction(fromId, 'typing')

    await createClient(fullId)

    const newDevices = await getClients()

    const device = newDevices.find(device => device.name === fullId)

    if(!device) {
      await bot.sendMessage(fromId, '–û–π, –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ @kiraind')
      return
    }

    const qrBuffer = await getClientConfigQR(device.id)
    const configBuffer = await getClientConfig(device.id)

    await bot.sendMessage(
      fromId,
      '–ì–æ—Ç–æ–≤–æ!'
    )

    const qrMessage = await bot.sendPhoto(
      fromId,
      qrBuffer,
      {
        caption: '–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard ‚Äî'
      },
      {
        contentType: 'image/png',
      }
    )

    const configMessage = await bot.sendDocument(
      fromId,
      configBuffer,
      {
        caption: '‚Äî –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –≤ –Ω–µ–º —ç—Ç–æ—Ç —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.'
      },
      {
        filename: `${id}.wireguard.conf`,
        contentType: 'plain/text'
      }
    )

    const warningMessage = await bot.sendMessage(
      fromId,
      '–≠—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª—è—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç. –ù–µ –¥–µ–ª–∏—Å—å –∏–ª–∏ –Ω–∏ —Å –∫–µ–º –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.'
    )

    setTimeout(() => {
      bot.deleteMessage(fromId, qrMessage.message_id)
      bot.deleteMessage(fromId, configMessage.message_id)
      bot.deleteMessage(fromId, warningMessage.message_id)
    }, 5 * 60 * 1000)
  } else if(text.startsWith('/remove')) {
    const id = text.split(' ')[1]

    const fullId = `${username}:${id}`;

    const userDevices = devices.filter(client => client.name.startsWith(`${username}:`) && client.enabled)

    const device = userDevices.find(device => device.name === fullId);

    if(!device) {
      await bot.sendMessage(fromId, '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ—Ç :(')
      return
    }

    await disableClient(device.id)

    await bot.sendMessage(
      fromId,
      '–ì–æ—Ç–æ–≤–æ!'
    )
  } else if(text.startsWith('/start') || text.startsWith('/info')) {
    const userDevices = devices.filter(client => client.name.startsWith(`${username}:`) && client.enabled)
    const deviceList = userDevices.map(device => `üì≤ \`${device.name.split(':')[1]}\`, ${prettyBytes(device.transferRx + device.transferTx).replace('.', '\\.')} —Ç—Ä–∞—Ñ–∏–∫–∞`).join('\n')
    
    const allUserDevices = devices.filter(client => client.name.startsWith(`${username}:`))
    const dataUsage = allUserDevices.reduce((sum, device) => sum + device.transferRx + device.transferTx, 0)

    await bot.sendMessage(
      fromId,
      (userDevices.length > 0 ? (
        `–¢–≤–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n\n${deviceList}\n`
      ) : (
        `–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n`
      )) +
      `\n` +
      `–í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${prettyBytes(dataUsage).replace('.', '\\.')} —Ç—Ä–∞—Ñ–∏–∫–∞\n` +
      `\n` +
      `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
      `\n` +
      `\`/start\` –∏–ª–∏ \`/info\` ‚Äî —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n` +
      `\`/add <device-id>\` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n` +
      `\`/remove <device-id>\` ‚Äî —É–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n`,
      {parse_mode: 'MarkdownV2'}
    )
  } else {
    await bot.sendMessage(
      fromId,
      `–ù–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π /start`
    )
  }
}
